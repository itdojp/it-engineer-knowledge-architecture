name: 📖 書籍ステータス更新

on:
  schedule:
    # 毎日午前9時（JST）に実行
    - cron: '0 0 * * *'
  workflow_dispatch:
    # 手動実行も可能

jobs:
  update-book-status:
    runs-on: ubuntu-latest
    name: 書籍ステータス自動更新
    
    steps:
    - name: チェックアウト
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: GitHub CLI設定
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
    - name: 既存書籍ステータス確認
      run: |
        echo "📚 既存書籍のステータス確認中..."
        
        # 既存書籍リポジトリの状態を確認
        books=(
          "linux-infra-textbook"
          "IT-infra-book"
          "podman-book"
          "practical-auth-book"
          "github-workflow-book"
          "ai-testing-strategy-book"
          "supabase-architecture-patterns-book"
          "BioinformaticsGuide-book"
          "computational-physicalism-book"
          "negotiation-for-engineers"
          "LogicalThinking-AI-Era-Guide"
          "ai-era-engineers-mind-book"
          "cs-visionaries-book"
        )
        
        > book_status.json
        echo "{" >> book_status.json
        echo "  \"last_updated\": \"$(date -Iseconds)\"," >> book_status.json
        echo "  \"books\": [" >> book_status.json
        
        for i in "${!books[@]}"; do
          book="${books[$i]}"
          echo "チェック中: $book"
          
          # リポジトリ情報取得
          if repo_info=$(gh api repos/itdojp/$book 2>/dev/null); then
            updated_at=$(echo "$repo_info" | jq -r '.updated_at')
            issues_count=$(gh api repos/itdojp/$book/issues --paginate | jq length)
            stars_count=$(echo "$repo_info" | jq -r '.stargazers_count')
            
            echo "    {" >> book_status.json
            echo "      \"name\": \"$book\"," >> book_status.json
            echo "      \"status\": \"active\"," >> book_status.json
            echo "      \"last_updated\": \"$updated_at\"," >> book_status.json
            echo "      \"issues_count\": $issues_count," >> book_status.json
            echo "      \"stars_count\": $stars_count" >> book_status.json
            
            if [ $i -eq $((${#books[@]} - 1)) ]; then
              echo "    }" >> book_status.json
            else
              echo "    }," >> book_status.json
            fi
          else
            echo "⚠️ $book にアクセスできません"
            echo "    {" >> book_status.json
            echo "      \"name\": \"$book\"," >> book_status.json
            echo "      \"status\": \"unavailable\"," >> book_status.json
            echo "      \"last_updated\": null," >> book_status.json
            echo "      \"issues_count\": 0," >> book_status.json
            echo "      \"stars_count\": 0" >> book_status.json
            
            if [ $i -eq $((${#books[@]} - 1)) ]; then
              echo "    }" >> book_status.json
            else
              echo "    }," >> book_status.json
            fi
          fi
        done
        
        echo "  ]" >> book_status.json
        echo "}" >> book_status.json
        
    - name: 進捗レポート生成
      run: |
        echo "📊 進捗レポート生成中..."
        
        # JSONファイルから統計情報を抽出
        total_books=$(jq '.books | length' book_status.json)
        active_books=$(jq '.books | map(select(.status == "active")) | length' book_status.json)
        total_issues=$(jq '.books | map(.issues_count) | add' book_status.json)
        total_stars=$(jq '.books | map(.stars_count) | add' book_status.json)
        
        # 進捗レポートMarkdown生成
        cat > progress_report.md << EOF
# 📊 IT Engineer Knowledge Architecture 進捗レポート

**更新日時**: $(date '+%Y年%m月%d日 %H:%M:%S JST')

## 📈 全体統計

- **総書籍数**: $total_books冊
- **アクティブ書籍**: $active_books冊
- **総Issue数**: $total_issues件
- **総Star数**: $total_stars個

## 📚 書籍別ステータス

| 書籍名 | ステータス | 最終更新 | Issues | Stars |
|--------|------------|----------|--------|-------|
EOF
        
        # 各書籍の情報をテーブルに追加
        jq -r '.books[] | "| \(.name) | \(.status) | \(.last_updated // "N/A") | \(.issues_count) | \(.stars_count) |"' book_status.json >> progress_report.md
        
        echo "" >> progress_report.md
        echo "## 🎯 今週のハイライト" >> progress_report.md
        echo "" >> progress_report.md
        echo "- 新規Issue対応状況" >> progress_report.md
        echo "- 学習者からのフィードバック" >> progress_report.md
        echo "- コミュニティ活動状況" >> progress_report.md
        
    - name: 変更があれば自動コミット
      run: |
        # 進捗レポートのコミット
        if [ -f progress_report.md ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 既存のファイルを上書き
          mv progress_report.md docs/progress_report.md
          
          if git diff --quiet docs/progress_report.md; then
            echo "📊 進捗レポートに変更はありません"
          else
            git add docs/progress_report.md
            git commit -m "📊 進捗レポート自動更新

$(date '+%Y-%m-%d %H:%M:%S JST')

🤖 Generated with [GitHub Actions]
"
            git push
            echo "✅ 進捗レポートを更新しました"
          fi
        fi
        
    - name: アラート通知（問題がある場合）
      run: |
        echo "🚨 アラートチェック中..."
        
        # アクセスできない書籍があるかチェック
        unavailable_count=$(jq '.books | map(select(.status == "unavailable")) | length' book_status.json)
        
        if [ "$unavailable_count" -gt 0 ]; then
          echo "⚠️ $unavailable_count 冊の書籍にアクセスできません"
          
          # Issue作成（重複チェック付き）
          existing_alert=$(gh issue list --label "alert,book-unavailable" --state open --json number --jq length)
          
          if [ "$existing_alert" -eq 0 ]; then
            unavailable_books=$(jq -r '.books[] | select(.status == "unavailable") | .name' book_status.json)
            
            gh issue create \
              --title "🚨 書籍アクセス異常検出" \
              --label "alert,book-unavailable" \
              --body "以下の書籍にアクセスできませんでした:

$unavailable_books

**検出日時**: $(date '+%Y-%m-%d %H:%M:%S JST')
**自動生成**: GitHub Actions

このIssueは自動生成されました。問題が解決されたら手動でクローズしてください。"
          fi
        else
          echo "✅ すべての書籍は正常にアクセス可能です"
        fi